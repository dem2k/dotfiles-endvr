#!/usr/bin/bash

# ==========[ DDD - DD mit Dialog ]===========

# ┌──────────────────────────────────────────────┐
# │ Einfacher Wrapper für dd mit Fortschritts-   │
# │ anzeige via dialog --gauge                   │
# └──────────────────────────────────────────────┘

# Prüfen, ob das Skript in einem Terminal läuft
if [[ ! -t 0 || ! -t 1 ]]; then
  echo "❌ Fehler: Dieses Skript muss in einem Terminal ausgeführt werden."
  echo "   Bitte öffne ein Terminal und führe das Skript dort aus."
  exit 1
fi

# Parameter parsen
while [[ $# -gt 0 ]]; do
  case "$1" in
    -if)
      SOURCE="$2"
      shift 2
      ;;
    -of)
      DEST="$2"
      shift 2
      ;;
    *)
      echo "Unbekannter Parameter: $1"
      echo "Benutzung: ddd -if <inputfile> [-of <outputdevice>]"
      exit 1
      ;;
  esac
done

# Validierung: Input-Datei
if [[ -z "$SOURCE" ]]; then
  echo "❌ Fehler: -if (Input-Datei) muss angegeben werden."
  exit 1
fi
 
if [[ ! -f "$SOURCE" ]]; then
  echo "❌ Fehler: Input-Datei '$SOURCE' existiert nicht."
  exit 1
fi

# Wenn -of fehlt → interaktive Auswahl anzeigen
if [[ -z "$DEST" ]]; then
  DISKS=()
  for devpath in /dev/sd?; do
    if [[ -b "$devpath" ]]; then
      devname=$(basename "$devpath")
      # Größe in Bytes → formatiert
      SIZE=$(lsblk -b -dn -o SIZE "$devpath" 2>/dev/null)
      SIZE_H=$(numfmt --to=iec-i --suffix=B "$SIZE")
      # Vendor, Model und Label mit udevadm
      VENDOR=$(udevadm info --query=all --name="$devpath" 2>/dev/null | grep "ID_VENDOR=" | cut -d= -f2)
      MODEL=$(udevadm info --query=all --name="$devpath" 2>/dev/null | grep "ID_MODEL=" | cut -d= -f2)
      # Label von der ersten Partition holen
      LABEL=$(lsblk -n -o LABEL "${devpath}1" 2>/dev/null | head -1 | tr -d '[:space:]')
      
      [[ -z "$VENDOR" ]] && VENDOR="Unbekannt"
      [[ -z "$MODEL" ]] && MODEL="Unbekannt"
      [[ -z "$LABEL" ]] && LABEL="(kein Label)"
      
      # Label für dialog menu mit column formatiert
      DISKS+=("$devpath" "${SIZE_H}; ${VENDOR}; ${MODEL}; ${LABEL}")
    fi
  done

  if [[ ${#DISKS[@]} -eq 0 ]]; then
    echo "❌ Keine geeigneten Zielgeräte gefunden (z.B. /dev/sdX)."
    exit 1
  fi

  # Dialog-Menü anzeigen
  DEST=$(dialog --clear --title "Zielgerät auswählen" \
    --menu "Wähle das Zielgerät (SD-Karte, USB-Stick):" 20 70 10 "${DISKS[@]}" 3>&1 1>&2 2>&3)
 
  # Prüfen, ob abgebrochen
  if [[ -z "$DEST" ]]; then
    echo "Abgebrochen."
    exit 1
  fi
fi
 
# Bestätigung anzeigen
dialog --title "Bestätigung" --yesno "Quelle : $SOURCE\nZiel   : $DEST\n\nFortfahren?" 10 70
response=$?
if [[ $response -ne 0 ]]; then
  echo "Abgebrochen."
  exit 1
fi
 
# LOGFILE="/tmp/ddd.log"
# TITLE="📦 DDD Schreibet ... "
# TEXT="Kopiere '$SOURCE' nach '$DEST'..."
# # Gesamtgröße der Input-Datei
# TOTAL_SIZE=$(stat -c %s "$SOURCE")
# # Starte dd im Hintergrund
# LANG=C dd if="$SOURCE" of="$DEST" bs=4M status=progress oflag=sync 2> "$LOGFILE" &
# DD_PID=$!
# # Fortschritt anzeigen
# ( while kill -0 $DD_PID 2>/dev/null; do
#     # # Fordere Statusausgabe an
#     # kill -USR1 "$DD_PID" 2>/dev/null
#     sleep 1
#     # Letzte Zeile mit "bytes" aus dem Log
#     LAST_LINE=$(grep -oPi '[0-9]+ bytes.*' "$LOGFILE" | tail -1)
#     # Extrahiere aktuell kopierte Bytes für Fortschritt
#     CURRENT=$(echo "$LAST_LINE" | grep -oP '[0-9]+' )
#     if [[ -n "$CURRENT" && "$CURRENT" -gt 0 ]]; then
#       PERCENT=$(( CURRENT * 100 / TOTAL_SIZE ))
#       echo "XXX"
#       echo "$LAST_LINE"  
#       echo "XXX"
#       echo "$PERCENT"
#     fi
#   done
#   echo 100
#   echo "# ✅ Fertig: ISO wurde erfolgreich geschrieben."
# ) | dialog --title "$TITLE" --gauge "$TEXT" 10 70 0
# # dialog --title "Fertig" --msgbox "✅ ISO erfolgreich geschrieben auf:\n$DEST" 10 70

reset && clear

pv "$SOURCE" | dd of="$DEST" bs=4M status=progress oflag=sync
